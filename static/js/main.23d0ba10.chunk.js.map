{"version":3,"sources":["components/Navigation.js","components/SiteContent.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","_useState","useState","_useState2","Object","slicedToArray","isOpen","setIsOpen","react_default","a","createElement","react","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","rel","target","SiteContent","Container","Row","Col","App","ReactGA","initialize","pageview","window","location","pathname","colours","containerClass","Math","floor","random","length","components_Navigation","components_SiteContent","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAkDeA,EAvCI,WAAM,IAAAC,EACKC,oBAAS,GADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAChBK,EADgBH,EAAA,GACRI,EADQJ,EAAA,GAOvB,OACEK,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjCP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAaC,KAAK,KAAlB,cACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAeC,QARN,WACbZ,GAAWD,MAQPE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAUd,OAAQA,EAAQe,QAAM,GAC9Bb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7Bb,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACER,KAAK,+BACLS,IAAI,sBACJC,OAAO,UAHT,WAQFnB,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACER,KAAK,0BACLS,IAAI,sBACJC,OAAO,UAHT,uCCZCC,EApBK,WAClB,OACEpB,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAKR,UAAU,0BACbf,EAAAC,EAAAC,cAAA,OAAKa,UAAU,gBACbf,EAAAC,EAAAC,cAAA,MAAIa,UAAU,QAAd,cACAf,EAAAC,EAAAC,cAAA,KAAGa,UAAU,QAAb,4FCWCS,MAjBf,WACEC,IAAQC,WAAW,iBACnBD,IAAQE,SAASC,OAAOC,SAASC,UAEjC,IAAMC,EAAU,CAAC,OAAQ,QAAS,SAAU,QAGtCC,EAAiB,kBADRD,EAAQE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAQK,SAG1D,OACEpC,EAAAC,EAAAC,cAAA,OAAKa,UAAWiB,GACdhC,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,QCLcC,QACW,cAA7BX,OAAOC,SAASW,UAEe,UAA7BZ,OAAOC,SAASW,UAEhBZ,OAAOC,SAASW,SAASC,MACvB,2DCTNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.23d0ba10.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\";\r\n\r\nconst Navigation = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Navbar color='light' light expand='md'>\r\n        <NavbarBrand href='/'>Jim Groome</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className='ml-auto' navbar>\r\n            <NavItem>\r\n              <NavLink\r\n                href='https://github.com/jimgroome'\r\n                rel='noopener noreferrer'\r\n                target='_blank'\r\n              >\r\n                GitHub\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                href='mailto:hello@jimgroo.me'\r\n                rel='noopener noreferrer'\r\n                target='_blank'\r\n              >\r\n                Email\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React, { Fragment } from \"react\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\nconst SiteContent = () => {\r\n  return (\r\n    <Fragment>\r\n      <Container>\r\n        <Row>\r\n          <Col className='site-content-container'>\r\n            <div className='site-content'>\r\n              <h1 className='mb-4'>Jim Groome</h1>\r\n              <p className='mb-0'>\r\n                Web developer in Kent. Music fan, reader, excessively tall, hot\r\n                drinks enthusiast.\r\n              </p>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SiteContent;\r\n","import React from \"react\";\r\nimport ReactGA from \"react-ga\";\r\nimport Navigation from \"./components/Navigation\";\r\nimport SiteContent from \"./components/SiteContent\";\r\n\r\nfunction App() {\r\n  ReactGA.initialize(\"UA-9828579-19\");\r\n  ReactGA.pageview(window.location.pathname);\r\n\r\n  const colours = [\"blue\", \"green\", \"yellow\", \"pink\"];\r\n\r\n  const colour = colours[Math.floor(Math.random() * colours.length)];\r\n  const containerClass = \"page-container \" + colour;\r\n\r\n  return (\r\n    <div className={containerClass}>\r\n      <Navigation />\r\n      <SiteContent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.scss';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}