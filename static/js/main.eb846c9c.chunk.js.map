{"version":3,"sources":["components/SiteContent.js","App.js","serviceWorker.js","index.js"],"names":["SiteContent","_ref","colour","_useState","useState","_useState2","Object","slicedToArray","workModalOpen","setWorkModalOpen","toggleWorkModal","e","preventDefault","react_default","a","createElement","className","href","onClick","rel","target","Modal","isOpen","toggle","ModalHeader","ModalBody","ModalFooter","Button","color","App","ReactGA","initialize","pageview","window","location","pathname","colours","Math","floor","random","length","containerClass","components_SiteContent","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.eb846c9c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\n\r\nconst SiteContent = ({ colour }) => {\r\n  const [workModalOpen, setWorkModalOpen] = useState(false);\r\n\r\n  const toggleWorkModal = (e) => {\r\n    e.preventDefault();\r\n    setWorkModalOpen(!workModalOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"site-content\">\r\n      <h1 className=\"mb-4\">Jim Groome</h1>\r\n      <p>Full-stack web developer in Kent.</p>\r\n      <p>Loves HTML, CSS, JS, Python, AWS, JAMstack, and hot drinks.</p>\r\n      <p className=\"mb-0\">\r\n        <a href=\"#!\" onClick={(e) => toggleWorkModal(e)}>\r\n          Work\r\n        </a>{\" \"}\r\n        ::{\" \"}\r\n        <a href=\"https://github.com/jimgroome\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n          Github\r\n        </a>{\" \"}\r\n        ::{\" \"}\r\n        <a href=\"mailto:hello@jimgroo.me\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n          Email\r\n        </a>\r\n      </p>\r\n      <Modal isOpen={workModalOpen} toggle={toggleWorkModal}>\r\n        <ModalHeader toggle={toggleWorkModal}>Selected recent work</ModalHeader>\r\n        <ModalBody>\r\n          <p>\r\n            Most of my work is for my employer, who do not make their products public. However, here are some freelance\r\n            projects I've worked on recently.\r\n          </p>\r\n          <ul>\r\n            <li>\r\n              <a href=\"https://nowplaying.jimgroo.me\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                Now playing on BBC 6 Music\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a href=\"https://www.wesanitizeservices.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                We Sanitize Services\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a href=\"https://fierce-content.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                Fierce Content\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a href=\"https://weddingphotos.jimgroo.me/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                Wedding photos\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button onClick={toggleWorkModal} color=\"secondary\">\r\n            Close\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SiteContent;\r\n","import React from \"react\";\r\nimport ReactGA from \"react-ga\";\r\nimport SiteContent from \"./components/SiteContent\";\r\n\r\nfunction App() {\r\n  ReactGA.initialize(\"UA-142839175-1\");\r\n  ReactGA.pageview(window.location.pathname);\r\n\r\n  const colours = [\"blue\", \"green\", \"yellow\", \"pink\"];\r\n\r\n  const colour = colours[Math.floor(Math.random() * colours.length)];\r\n  const containerClass = \"page-container \" + colour;\r\n\r\n  return (\r\n    <div className={containerClass}>\r\n      <SiteContent colour={colour} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./index.scss\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}